package com.compomics.util.gui.parameters;

import com.compomics.util.parameters.UtilitiesUserParameters;
import java.awt.Color;
import javax.swing.JColorChooser;
import javax.swing.JDialog;
import javax.swing.JFrame;

/**
 * Dialog for user selection of the colors used by the sparklines.
 *
 * @author Harald Barsnes
 */
public class SparklineColorsDialog extends javax.swing.JDialog {

    /**
     * The utilities user parameters object.
     */
    private UtilitiesUserParameters utilitiesUserParameters;
    
    /**
     * Creates a new SparklineColorsDialog.
     *
     * @param parent the parent frame
     * @param utilitiesUserParameters the utilities user parameters object
     */
    public SparklineColorsDialog(JFrame parent, UtilitiesUserParameters utilitiesUserParameters) {
        super(parent, true);
        this.utilitiesUserParameters = utilitiesUserParameters;
        initComponents();
        setUpGui();
        setLocationRelativeTo(parent);
        setVisible(true);
    }
    
    /**
     * Creates a new SparklineColorsDialog.
     * 
     * @param parent the parent frame
     * @param utilitiesUserParameters the utilities user parameters object
     */
    public SparklineColorsDialog(JDialog parent, UtilitiesUserParameters utilitiesUserParameters) {
        super(parent, true);
        this.utilitiesUserParameters = utilitiesUserParameters;
        initComponents();
        setUpGui();
        setLocationRelativeTo(parent);
        setVisible(true);
    }

    /**
     * Set up the GUI.
     */
    private void setUpGui() {

        validatedColorPanel.setBackground(utilitiesUserParameters.getSparklineColor());
        notValidatedColorPanel.setBackground(utilitiesUserParameters.getSparklineColorNonValidated());
        notFoundColorPanel.setBackground(utilitiesUserParameters.getSparklineColorNotFound());
        possibleColorPanel.setBackground(utilitiesUserParameters.getSparklineColorPossible());
        doubtfulColorPanel.setBackground(utilitiesUserParameters.getSparklineColorDoubtful());
        falsePositiveColorPanel.setBackground(utilitiesUserParameters.getSparklineColorFalsePositives());
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        sparklineColorsPanel = new javax.swing.JPanel();
        validatedColorLabel = new javax.swing.JLabel();
        validatedColorPanel = new javax.swing.JPanel();
        notValidatedColorLabel = new javax.swing.JLabel();
        notValidatedColorPanel = new javax.swing.JPanel();
        notFoundColorLabel = new javax.swing.JLabel();
        notFoundColorPanel = new javax.swing.JPanel();
        possibleColorLabel = new javax.swing.JLabel();
        possibleColorPanel = new javax.swing.JPanel();
        doubtfulColorLabel = new javax.swing.JLabel();
        doubtfulColorPanel = new javax.swing.JPanel();
        falsePositiveColorLabel = new javax.swing.JLabel();
        falsePositiveColorPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sparkline Colors");
        setMinimumSize(new java.awt.Dimension(257, 298));

        backgroundPanel.setBackground(new java.awt.Color(230, 230, 230));

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        sparklineColorsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Colors"));
        sparklineColorsPanel.setOpaque(false);

        validatedColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        validatedColorLabel.setText("Confident");

        validatedColorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        validatedColorPanel.setForeground(new java.awt.Color(255, 255, 255));
        validatedColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                validatedColorPanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                validatedColorPanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                validatedColorPanelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout validatedColorPanelLayout = new javax.swing.GroupLayout(validatedColorPanel);
        validatedColorPanel.setLayout(validatedColorPanelLayout);
        validatedColorPanelLayout.setHorizontalGroup(
            validatedColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 27, Short.MAX_VALUE)
        );
        validatedColorPanelLayout.setVerticalGroup(
            validatedColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 24, Short.MAX_VALUE)
        );

        notValidatedColorLabel.setText("Not Validated");

        notValidatedColorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        notValidatedColorPanel.setForeground(new java.awt.Color(255, 255, 255));
        notValidatedColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                notValidatedColorPanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                notValidatedColorPanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                notValidatedColorPanelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout notValidatedColorPanelLayout = new javax.swing.GroupLayout(notValidatedColorPanel);
        notValidatedColorPanel.setLayout(notValidatedColorPanelLayout);
        notValidatedColorPanelLayout.setHorizontalGroup(
            notValidatedColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 27, Short.MAX_VALUE)
        );
        notValidatedColorPanelLayout.setVerticalGroup(
            notValidatedColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 24, Short.MAX_VALUE)
        );

        notFoundColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        notFoundColorLabel.setText("Not Found");

        notFoundColorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        notFoundColorPanel.setForeground(new java.awt.Color(255, 255, 255));
        notFoundColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                notFoundColorPanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                notFoundColorPanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                notFoundColorPanelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout notFoundColorPanelLayout = new javax.swing.GroupLayout(notFoundColorPanel);
        notFoundColorPanel.setLayout(notFoundColorPanelLayout);
        notFoundColorPanelLayout.setHorizontalGroup(
            notFoundColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 27, Short.MAX_VALUE)
        );
        notFoundColorPanelLayout.setVerticalGroup(
            notFoundColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        possibleColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        possibleColorLabel.setText("Possible");

        possibleColorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        possibleColorPanel.setForeground(new java.awt.Color(255, 255, 255));
        possibleColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                possibleColorPanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                possibleColorPanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                possibleColorPanelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout possibleColorPanelLayout = new javax.swing.GroupLayout(possibleColorPanel);
        possibleColorPanel.setLayout(possibleColorPanelLayout);
        possibleColorPanelLayout.setHorizontalGroup(
            possibleColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 27, Short.MAX_VALUE)
        );
        possibleColorPanelLayout.setVerticalGroup(
            possibleColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        doubtfulColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        doubtfulColorLabel.setText("Doubtful");

        doubtfulColorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        doubtfulColorPanel.setForeground(new java.awt.Color(255, 255, 255));
        doubtfulColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doubtfulColorPanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                doubtfulColorPanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                doubtfulColorPanelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout doubtfulColorPanelLayout = new javax.swing.GroupLayout(doubtfulColorPanel);
        doubtfulColorPanel.setLayout(doubtfulColorPanelLayout);
        doubtfulColorPanelLayout.setHorizontalGroup(
            doubtfulColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 27, Short.MAX_VALUE)
        );
        doubtfulColorPanelLayout.setVerticalGroup(
            doubtfulColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        falsePositiveColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        falsePositiveColorLabel.setText("False Positive");

        falsePositiveColorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        falsePositiveColorPanel.setForeground(new java.awt.Color(255, 255, 255));
        falsePositiveColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                falsePositiveColorPanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                falsePositiveColorPanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                falsePositiveColorPanelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout falsePositiveColorPanelLayout = new javax.swing.GroupLayout(falsePositiveColorPanel);
        falsePositiveColorPanel.setLayout(falsePositiveColorPanelLayout);
        falsePositiveColorPanelLayout.setHorizontalGroup(
            falsePositiveColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 27, Short.MAX_VALUE)
        );
        falsePositiveColorPanelLayout.setVerticalGroup(
            falsePositiveColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout sparklineColorsPanelLayout = new javax.swing.GroupLayout(sparklineColorsPanel);
        sparklineColorsPanel.setLayout(sparklineColorsPanelLayout);
        sparklineColorsPanelLayout.setHorizontalGroup(
            sparklineColorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sparklineColorsPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(sparklineColorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sparklineColorsPanelLayout.createSequentialGroup()
                        .addComponent(falsePositiveColorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(36, 36, 36)
                        .addComponent(falsePositiveColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sparklineColorsPanelLayout.createSequentialGroup()
                        .addComponent(doubtfulColorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(36, 36, 36)
                        .addComponent(doubtfulColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sparklineColorsPanelLayout.createSequentialGroup()
                        .addComponent(possibleColorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(36, 36, 36)
                        .addComponent(possibleColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sparklineColorsPanelLayout.createSequentialGroup()
                        .addComponent(notValidatedColorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                        .addGap(36, 36, 36)
                        .addComponent(notValidatedColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sparklineColorsPanelLayout.createSequentialGroup()
                        .addComponent(notFoundColorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(36, 36, 36)
                        .addComponent(notFoundColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(sparklineColorsPanelLayout.createSequentialGroup()
                        .addComponent(validatedColorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                        .addGap(36, 36, 36)
                        .addComponent(validatedColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        sparklineColorsPanelLayout.setVerticalGroup(
            sparklineColorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sparklineColorsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sparklineColorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(validatedColorLabel)
                    .addComponent(validatedColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sparklineColorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(doubtfulColorLabel)
                    .addComponent(doubtfulColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sparklineColorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(notValidatedColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(notValidatedColorLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sparklineColorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(notFoundColorLabel)
                    .addComponent(notFoundColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sparklineColorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(possibleColorLabel)
                    .addComponent(possibleColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sparklineColorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(falsePositiveColorLabel)
                    .addComponent(falsePositiveColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        sparklineColorsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {doubtfulColorLabel, falsePositiveColorLabel, notFoundColorLabel, notValidatedColorLabel, notValidatedColorPanel, possibleColorLabel, validatedColorLabel, validatedColorPanel});

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sparklineColorsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sparklineColorsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(okButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Close the dialog.
     *
     * @param evt
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        UtilitiesUserParameters.saveUserParameters(utilitiesUserParameters);
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * Change the cursor to a hand cursor.
     *
     * @param evt
     */
    private void validatedColorPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_validatedColorPanelMouseEntered
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_validatedColorPanelMouseEntered

    /**
     * Change the cursor back to the default cursor.
     *
     * @param evt
     */
    private void validatedColorPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_validatedColorPanelMouseExited
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_validatedColorPanelMouseExited

    /**
     * Update the color used for validated.
     *
     * @param evt
     */
    private void validatedColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_validatedColorPanelMouseClicked
        Color newColor = JColorChooser.showDialog(this, "Pick a Color", validatedColorPanel.getBackground());

        if (newColor != null) {
            validatedColorPanel.setBackground(newColor);
            utilitiesUserParameters.setSparklineColor(validatedColorPanel.getBackground());
            validatedColorPanel.repaint();
        }
    }//GEN-LAST:event_validatedColorPanelMouseClicked

    /**
     * Change the cursor to a hand cursor.
     *
     * @param evt
     */
    private void notValidatedColorPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notValidatedColorPanelMouseEntered
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_notValidatedColorPanelMouseEntered

    /**
     * Change the cursor back to the default cursor.
     *
     * @param evt
     */
    private void notValidatedColorPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notValidatedColorPanelMouseExited
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_notValidatedColorPanelMouseExited

    /**
     * Update the color used for not validated.
     *
     * @param evt
     */
    private void notValidatedColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notValidatedColorPanelMouseClicked
        Color newColor = JColorChooser.showDialog(this, "Pick a Color", notValidatedColorPanel.getBackground());

        if (newColor != null) {
            newColor = new Color(newColor.getRed(), newColor.getGreen(), newColor.getBlue());
            notValidatedColorPanel.setBackground(newColor);
            utilitiesUserParameters.setSparklineColorNonValidated(notValidatedColorPanel.getBackground());
            notValidatedColorPanel.repaint();
        }
    }//GEN-LAST:event_notValidatedColorPanelMouseClicked

    /**
     * Update the color used for not found.
     *
     * @param evt
     */
    private void notFoundColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notFoundColorPanelMouseClicked
        Color newColor = JColorChooser.showDialog(this, "Pick a Color", notFoundColorPanel.getBackground());

        if (newColor != null) {
            notFoundColorPanel.setBackground(newColor);
            utilitiesUserParameters.setSparklineColorNotFound(notFoundColorPanel.getBackground());
            notFoundColorPanel.repaint();
        }
    }//GEN-LAST:event_notFoundColorPanelMouseClicked

    /**
     * Change the cursor to a hand cursor.
     *
     * @param evt
     */
    private void notFoundColorPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notFoundColorPanelMouseEntered
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_notFoundColorPanelMouseEntered

    /**
     * Change the cursor back to the default cursor.
     *
     * @param evt
     */
    private void notFoundColorPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notFoundColorPanelMouseExited
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_notFoundColorPanelMouseExited

    /**
     * Update the color used for possible.
     *
     * @param evt
     */
    private void possibleColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_possibleColorPanelMouseClicked
        Color newColor = JColorChooser.showDialog(this, "Pick a Color", possibleColorPanel.getBackground());

        if (newColor != null) {
            possibleColorPanel.setBackground(newColor);
            utilitiesUserParameters.setSparklineColorPossible(possibleColorPanel.getBackground());
            possibleColorPanel.repaint();
        }
    }//GEN-LAST:event_possibleColorPanelMouseClicked

    /**
     * Change the cursor to a hand cursor.
     *
     * @param evt
     */
    private void possibleColorPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_possibleColorPanelMouseEntered
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_possibleColorPanelMouseEntered

    /**
     * Change the cursor back to the default cursor.
     *
     * @param evt
     */
    private void possibleColorPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_possibleColorPanelMouseExited
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_possibleColorPanelMouseExited

    /**
     * Update the color used for doubtful.
     *
     * @param evt
     */
    private void doubtfulColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doubtfulColorPanelMouseClicked
        Color newColor = JColorChooser.showDialog(this, "Pick a Color", doubtfulColorPanel.getBackground());

        if (newColor != null) {
            doubtfulColorPanel.setBackground(newColor);
            utilitiesUserParameters.setSparklineColorDoubtful(doubtfulColorPanel.getBackground());
            doubtfulColorPanel.repaint();
        }
    }//GEN-LAST:event_doubtfulColorPanelMouseClicked

    /**
     * Change the cursor to a hand cursor.
     *
     * @param evt
     */
    private void doubtfulColorPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doubtfulColorPanelMouseEntered
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_doubtfulColorPanelMouseEntered

    /**
     * Change the cursor back to the default cursor.
     *
     * @param evt
     */
    private void doubtfulColorPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doubtfulColorPanelMouseExited
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_doubtfulColorPanelMouseExited

    /**
     * Update the color used for false positive.
     *
     * @param evt
     */
    private void falsePositiveColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_falsePositiveColorPanelMouseClicked
        Color newColor = JColorChooser.showDialog(this, "Pick a Color", falsePositiveColorPanel.getBackground());

        if (newColor != null) {
            falsePositiveColorPanel.setBackground(newColor);
            utilitiesUserParameters.setSparklineColorFalsePositives(falsePositiveColorPanel.getBackground());
            falsePositiveColorPanel.repaint();
        }
    }//GEN-LAST:event_falsePositiveColorPanelMouseClicked

    /**
     * Change the cursor to a hand cursor.
     *
     * @param evt
     */
    private void falsePositiveColorPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_falsePositiveColorPanelMouseEntered
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_falsePositiveColorPanelMouseEntered

    /**
     * Change the cursor back to the default cursor.
     *
     * @param evt
     */
    private void falsePositiveColorPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_falsePositiveColorPanelMouseExited
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_falsePositiveColorPanelMouseExited

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JLabel doubtfulColorLabel;
    private javax.swing.JPanel doubtfulColorPanel;
    private javax.swing.JLabel falsePositiveColorLabel;
    private javax.swing.JPanel falsePositiveColorPanel;
    private javax.swing.JLabel mirroredPeakColorLabel3;
    private javax.swing.JPanel mirroredPeakColorPanel2;
    private javax.swing.JLabel notFoundColorLabel;
    private javax.swing.JPanel notFoundColorPanel;
    private javax.swing.JLabel notValidatedColorLabel;
    private javax.swing.JPanel notValidatedColorPanel;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel possibleColorLabel;
    private javax.swing.JPanel possibleColorPanel;
    private javax.swing.JPanel sparklineColorsPanel;
    private javax.swing.JLabel validatedColorLabel;
    private javax.swing.JPanel validatedColorPanel;
    // End of variables declaration//GEN-END:variables
}
